---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-ingress-controller
    app.kubernetes.io/component: controller
  name: nginx-controller
  namespace: uct
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: nginx-ingress-controller
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: nginx-ingress-controller
    spec:
      automountServiceAccountToken: true
      containers:
        - args:
            - /nginx-ingress-controller
            - --default-backend-service=uct/nginx-ingress-default-backend
            - --publish-service=uct/nginx-ingress-controller
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx-uct
            - --configmap=uct/nginx-ingress-controller
            - --enable-ssl-passthrough
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          image: us.gcr.io/k8s-artifacts-prod/ingress-nginx/controller:v1.1.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: nginx-ingress-controller
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
            - containerPort: 443
              name: https
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
                - NET_BIND_SERVICE
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 101
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: nginx-ingress
      serviceAccountName: nginx-ingress
      shareProcessNamespace: false
      terminationGracePeriodSeconds: 30

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  generation: 1
  labels:
    app: nginx-ingress-backend
    app.kubernetes.io/component: default-backend
  name: nginx-ingress-default-backend
  namespace: uct
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: nginx-ingress-backend
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: nginx-ingress-backend
        app.kubernetes.io/component: default-backend
    spec:
      automountServiceAccountToken: true
      containers:
        - image: k8s.gcr.io/defaultbackend-amd64:1.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: nginx-ingress-default-backend
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 65534
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: nginx-ingress-backend
      serviceAccountName: nginx-ingress-backend
      shareProcessNamespace: false
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
    component: controller
  name: nginx-ingress-controller
  namespace: uct
spec:
  externalTrafficPolicy: Local
  ports:
    - name: http
      port: 8083
      protocol: TCP
      targetPort: http
    - name: https
      port: 8443
      protocol: TCP
      targetPort: https
  selector:
    app: nginx-ingress-controller
  type: LoadBalancer

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
    app.kubernetes.io/component: default-backend
  name: nginx-ingress-default-backend
  namespace: uct
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: nginx-ingress-backend
    app.kubernetes.io/component: default-backend
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app: nginx-ingress
    release: nginx-ingress
  name: nginx-ingress
  namespace: uct

---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app: nginx-ingress
    release: nginx-ingress
  name: nginx-ingress-backend
  namespace: uct

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-controller-leader-nginx
  namespace: uct

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-controller-leader-nginx-uct
  namespace: uct

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress-uct
  namespace: uct
rules:
  - apiGroups:
      - ""
    resources:
      - namespace
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - pods
      - secrets
      - configmaps
      - endpoints
    verbs:
      - list
      - watch
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - list
      - watch
      - update
      - get
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - list
      - watch
      - get
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - ""
    resourceNames:
      - ingress-controller-leader-nginx-uct
    resources:
      - configmaps
    verbs:
      - update
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - update
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - update
      - get
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: nginx-ingress
  name: nginx-ingress
  namespace: uct
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-uct
subjects:
  - kind: ServiceAccount
    name: nginx-ingress
    namespace: uct

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: nginx-ingress-uct
  name: nginx-ingress-uct
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: nginx-ingress-uct
  name: nginx-ingress-uct
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-uct
subjects:
  - kind: ServiceAccount
    name: nginx-ingress
    namespace: uct

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.allow-http: "false"
    kubernetes.io/ingress.class: nginx-uct
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/configuration-snippet: proxy_set_header Authorization $http_authorization;
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/secure-backends: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
  name: uct-cntlr-ingress
  namespace: uct
spec:
  rules:
    - http:
        paths:
          - backend:
              service:
                name: uct-cntlr-service
                port:
                  number: 8443
            path: /
            pathType: ImplementationSpecific
            
